@page "/produtos"

<PageTitle>Medicamentos</PageTitle>

@inject NotificationService _notificationService
@inject NavigationManager _navigationManager

@inject IProducsService _productsService

<div class="row">
    <div class="col">
        <h1>Medicamentos e Materiais</h1>
    </div>
    <div class="col">
        <a type="button" class="btn btn-outline-success float-end" href="produtos/novo">
            <i class="bi bi-folder-plus p-2"></i>Novo
        </a>
    </div>
</div>

<div class="input-group mb-3">
    <span class="input-group-text" id="inputGroup-sizing-default">Pesquisa por Nome</span>
    <input @bind="PartialProductName" type="text" class="form-control" aria-label="Sizing example input" aria-describedby="inputGroup-sizing-default">
    <button @onclick="@(async (args) => await SearchProducts(args))" type="button" class="btn btn-outline-primary btn-lg">
        <i class="bi bi-search p-2"></i>Procurar
    </button>
</div>

@foreach(var product in products)
{
    <div class="row row-cols-1 row-cols-md-3 mb-3 text-center">
        <div class="col">
            <div class="card mb-4 rounded-3 shadow-sm">
                <div class="card-header py-3">
                    <h4 class="my-0 fw-normal">@product.Name</h4>
                </div>
                <div class="card-body">
                    <h1 class="card-title pricing-card-title">Concentrações:</h1>
                    <ul class="list-unstyled mt-3 mb-4">
                        @foreach (var concentration in product.SelectedDrugsConcentrations)
                        {
                            <li>@concentration.ConcentrationDescription</li>
                        }
                    </ul>
                    <button @onclick="(args) => NavigateToUpdateProduct(args, product.Id)" type="button" 
                        class="w-100 btn btn-lg btn-outline-primary">Editar</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    string? PartialProductName { get; set; }
    List<ProductVM> products { get; set; } = new();

    void NavigateToUpdateProduct(MouseEventArgs args, string? productId)
    {
        _navigationManager.NavigateTo($"/produtos/editar/{productId}");
    }

    async Task SearchProducts(MouseEventArgs args)
    {
        if (ValidateProductsSearch())
        {
            products = await _productsService.SearchProductByName(PartialProductName);
        }
    }

    bool ValidateProductsSearch()
    {
        if (string.IsNullOrEmpty(PartialProductName))
        {
            var message = new NotificationMessage 
            { 
                Severity = NotificationSeverity.Error, 
                Summary = "Campos Inválidos", 
                Detail = "Preencha um valor para o nome do produto ou medicamento!", 
                Duration = 5000 
            };
            _notificationService.Notify(message);
            return false;
        }
        if (PartialProductName.Length < 3)
        {
            var message = new NotificationMessage 
            { 
                Severity = NotificationSeverity.Error, 
                Summary = "Campos Inválidos", 
                Detail = "O nome do produto ou medicamento precisa ser maior ou igual a 3 caracteres!", 
                Duration = 5000 
            };
            _notificationService.Notify(message);
            return false;
        }
        return true;
    }
}
